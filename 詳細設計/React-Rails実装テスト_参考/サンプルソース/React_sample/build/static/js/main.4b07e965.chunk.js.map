{"version":3,"sources":["Components/ViewProduct.jsx","Components/ProductsContainer.jsx","Components/FormContainer.jsx","Components/MainContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["ViewProduct","props","handleDeleate","onDelete","data","id","handleUpdate","onUpdate","state","updateText","handleInput","e","setState","target","value","this","text","className","onClick","type","onChange","Button","React","Component","ProductsContainer","productData","map","key","deleateProduct","updateProduct","FormContainer","hundleSubmit","createProduct","product","FormGroup","controlId","FormControl","placeholder","onChangetext","MainContainer","axios","post","then","response","newData","update","products","$push","catch","console","log","delete","productIndex","findIndex","x","deletedProducts","$splice","patch","$set","get","results","hendleAdd","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4b07e965.chunk.js","sourcesContent":["import React from 'react'\nimport {Button} from 'react-bootstrap'\n\nclass ViewProduct extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      updateText: '',\n    }\n  }\n\n\n  handleDeleate = () => {\n    this.props.onDelete(this.props.data.id)\n  }\n\n  handleUpdate = () => {\n    this.props.onUpdate(this.props.data.id, this.state.updateText)\n  }\n\n  handleInput = (e) => {\n    this.setState({updateText: e.target.value})\n  }\n\n\n  render() {\n    return(\n      <div>\n        <span>{this.props.data.text}</span>\n        <span className='deleteButton' onClick={this.handleDeleate}>X</span>\n        <span>\n          <input type=\"text\" value={this.state.updateText} onChange={e => this.handleInput(e)} />\n        </span>\n        <span>\n          <Button type=\"submit\" onClick={this.handleUpdate}>更新！</Button>\n        </span>\n      </div>\n    )\n  }\n}\n\nexport default ViewProduct","import React from 'react'\nimport ViewProduct from './ViewProduct'\n\nclass ProductsContainer extends React.Component {\n  render() {\n    return(\n      <div className='productList'>\n         {this.props.productData.map((data) => {\n           return(\n               <ViewProduct data={data} key={data.id} onDelete={this.props.deleateProduct} onUpdate={this.props.updateProduct}/>\n           )\n         })}\n      </div>\n    )\n  }\n}\n\nexport default ProductsContainer","import React from 'react'\nimport {Button,FormGroup,FormControl} from 'react-bootstrap'\n\nclass FormContainer extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      product: ''\n    }\n  }\n\n  onChangetext(e) {\n    this.setState({product: e.target.value})\n  }\n\n  hundleSubmit = () => {\n    this.props.createProduct(this.state.product)\n    this.setState({product:''})\n  }\n\n\n  render(){\n    return(\n      <div>\n      <form>\n        <FormGroup controlId=\"formBasicText\">\n          <FormControl\n            type=\"text\"\n            value={this.state.product}\n            placeholder=\"Enter text\"\n            onChange={ e => this.onChangetext(e)}\n          />\n        </FormGroup>\n\n      </form>\n      <Button type=\"submit\" onClick={() => {this.hundleSubmit()}}>つぶやく</Button>\n      </div>\n    )\n  }\n}\n\nexport default FormContainer","import React from 'react'\nimport ProductsContainer from './ProductsContainer'\nimport FormContainer from './FormContainer'\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\nimport update from 'react-addons-update'\n\nclass MainContainer extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      products: []\n    }\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:3001/products')\n    .then((results) => {\n      console.log(results)\n      this.setState({products: results.data})\n    })\n    .catch((data) =>{\n      console.log(data)\n    })\n  }\n\n  createProduct = (product) => {\n    axios.post('http://localhost:3001/products',{product: product} )\n    .then((response) => {\n      const newData = update(this.state.products, {$push:[response.data]})\n      this.setState({products: newData})\n    })\n    .catch((data) =>{\n      console.log(data)\n    })\n  }\n\n  deleateProduct = (id) => {\n    axios.delete(`http://localhost:3001/products/${id}`)\n    .then((response) => {\n      const productIndex = this.state.products.findIndex(x => x.id === id)\n      const deletedProducts = update(this.state.products, {$splice: [[productIndex, 1]]})\n      this.setState({products: deletedProducts})\n      console.log('set')\n    })\n    .catch((data) =>{\n      console.log(data)\n    })\n  }\n\n  updateProduct = (id, product) => {\n    axios.patch(`http://localhost:3001/products/${id}`,{product: product})\n    .then((response) => {\n      const productIndex = this.state.products.findIndex(x => x.id === id)\n      const products = update(this.state.products, {[productIndex]: {$set: response.data}})\n      this.setState({products: products})\n    })\n    .catch((data) =>{\n      console.log(data)\n    })\n  }\n\n  render() {\n    return (\n      <div className='app-main'>\n        <FormContainer  hendleAdd={this.hendleAdd} createProduct={this.createProduct}/>\n        <ProductsContainer productData={this.state.products} deleateProduct={this.deleateProduct} updateProduct={this.updateProduct}/>\n      </div>\n    );\n  }\n}\n\nexport default MainContainer","import React, { Component } from 'react';\nimport MainContainer from './Components/MainContainer'\nimport './App.css';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MainContainer/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}